#!/usr/bin/env bash

set -e

##### Variables ###############################################################

export PATH=$HOME/neovim/bin:$HOME/node_modules/.bin:$HOME/.local/bin:$HOME/go/bin:$HOME/bin:$PATH

# Defind Colors
RED="\033[38;2;255;84;88m"
GREEN="\033[38;2;98;209;150m"
YELLOW="\033[38;2;255;179;120m"
BLUE="\033[38;2;101;178;255m"
MAGENTA="\033[38;2;144;108;255m"
CYAN="\033[38;2;99;242;241m"
CLEAR_COLOR="\033[0m"

INFO="GREEN"
WARN="YELLOW"
ERROR="RED"

# Define path
DOTPATH="$HOME/.dotfiles"
VIMPATH="$HOME/src/vim"
NEOVIMPATH="$HOME/src/neovim"
GITPATH="$HOME/src/git"

##### Functions ###############################################################

function _banner() {
    sep=$(for ((i = 1; i < $(tput cols); i++)); do echo -n =; done)
    printf "\n${BLUE}%s %s${CLEAR_COLOR}\n\n" "${1}" "${sep:${#1}}"
}

function _logger() {
    COLOR="${1}"
    printf "${!COLOR}%s${CLEAR_COLOR}\n" "${2}"
}

##### Build target ############################################################

_banner "Check build target..."

: << COMMENT
+-----------------+--------------------+
| BUILD env value | Use case           |
+=================+====================+
| minimal         | No internet access |
| default         | My typical setting |
| all             | All feature        |
+-----------------+--------------------+
COMMENT

if [[ -z "${BUILD}" ]]; then
    BUILD="default"
elif [[ "${BUILD,,}" == "minimal" || "${BUILD,,}" == "all" ]]; then
    BUILD="${BUILD,,}"
else
    BUILD="default"
fi

_logger "${INFO}" "Build target is ${BUILD^^}."

##### Set Proxy ###############################################################

_banner "Set Proxy if Available..."

if [[ "${http_proxy}" ]]; then
    if ! grep -q proxy /etc/yum.conf; then
        echo "proxy=${http_proxy}" | sudo tee -a /etc/yum.conf
        _logger "${INFO}" "Set proxy."
    else
        _logger "${INFO}" "Already set proxy."
    fi
else
    _logger "${INFO}" "No proxy configured."
fi

##### Setup repositories ######################################################

_banner "Setup repositories..."

if [[ ! -f /etc/yum.repos.d/github_git-lfs.repo ]]; then
    _logger "${INFO}" "Install Git LFS repository"
    curl -fsSL https://packagecloud.io/install/repositories/github/git-lfs/script.rpm.sh | sudo -E bash
fi

if [[ ! -f /etc/yum.repos.d/nodesource-el.repo ]]; then
    _logger "${INFO}" "Install Nodejs repository"
    curl -fsSL https://rpm.nodesource.com/setup_11.x | sudo -E bash -
fi

##### Install packages ########################################################

_banner "Install Packages..."

if [[ ! -f /etc/yum.repos.d/epel.repo ]]; then
    _logger "${INFO}" "Install EPEL repository"
    sudo -E yum install -y \
        https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
fi

sudo -E yum install -y \
    autoconf \
    automake \
    ctags \
    expat-devel \
    gcc \
    gcc-c++ \
    gettext \
    git \
    golang \
    libcurl-devel \
    libffi-devel \
    libjpeg-turbo-devel \
    libpng-devel \
    libtool \
    lua \
    lua-devel \
    lua-term \
    luajit \
    luajit-devel \
    make \
    ncurses-devel \
    ninja-build \
    nodejs \
    openssl-devel \
    patch \
    pkgconfig \
    python \
    python-devel \
    python36 \
    python36-devel \
    unzip \
    wget \
    which \
    words

##### Clone Dotfiles ##########################################################

_banner "Clone Dotfiles..."

if [[ ! -d "${DOTPATH}" ]]; then
    _logger "${INFO}" "Clone dotfiles repository"
    git clone https://github.com/IMOKURI/dotfiles.git "${DOTPATH}"
else
    _logger "${INFO}" "Update dotfiles repository"
    pushd "$(pwd)"
    cd "${DOTPATH}"
    git fetch
    popd
fi

##### Clone git ###############################################################

if [[ "${BUILD}" != "minimal" ]]; then
    if [[ ! -d "${GITPATH}" ]]; then
        _banner "Clone Git Repository..."
        git clone https://github.com/git/git.git "${GITPATH}"
    else
        _banner "Update Git Repository..."
        pushd "$(pwd)"
        cd "${DOTPATH}"
        make update-git
        popd
    fi
else
    _banner "Skip to clone Git."
fi

##### Install git #############################################################

if [[ "${BUILD}" != "minimal" ]]; then
    _banner "Install Git..."
    pushd "$(pwd)"
    cd "${DOTPATH}"
    make build-git
    popd

    _banner "Install Git-LFS"
    sudo -E yum install -y git-lfs
else
    _banner "Skip to install Git."
fi

##### Install python packages #################################################

_banner "Install Pip..."

ls /usr/local/bin/pip || curl -fsSL "https://bootstrap.pypa.io/get-pip.py" | sudo -E python3

sudo -E /usr/local/bin/pip install -U pip

_banner "Install Python Packages..."

pip install --user -U \
    ansible \
    autopep8 \
    black \
    cmake \
    flake8 \
    flake8-black \
    flake8-blind-except \
    flake8-builtins \
    flake8-import-order \
    isort \
    jedi \
    neovim \
    neovim-remote \
    pipenv \
    pipenv-pipes \
    pysnooper \
    vim-vint \
    yamllint \
    'python-language-server[all]'

##### Install nodejs packages #################################################

if [[ "${BUILD}" != "minimal" ]]; then
    _banner "Install NodeJS Packages..."
    npm install \
        bash-language-server \
        dockerfile-language-server-nodejs \
        doctoc \
        markdownlint-cli \
        neovim \
        prettier \
        textlint \
        textlint-rule-preset-ja-spacing \
        textlint-rule-preset-ja-technical-writing \
        textlint-rule-spellcheck-tech-word \
        vim-language-server \
        vscode-json-languageserver \
        yaml-language-server
else
    _banner "Skip to install NodeJS Packages."
fi

##### Install go packages #####################################################

if [[ "${BUILD}" != "minimal" ]]; then
    _banner "Install Go Packages..."
    go get -u \
        github.com/mrtazz/checkmake \
        github.com/tokuhirom/git-xlsx-textconv \
        mvdan.cc/sh/cmd/shfmt
else
    _banner "Skip to install Go Packages."
fi

##### Install ripgrep #########################################################

if [[ "${BUILD}" != "minimal" ]]; then
    _banner "Install RipGrep..."
    if [[ ! -f "${HOME}/bin/rg" ]]; then
        curl -fsSL -o /tmp/rg.tar.gz https://github.com/BurntSushi/ripgrep/releases/download/11.0.2/ripgrep-11.0.2-x86_64-unknown-linux-musl.tar.gz

        tar xf /tmp/rg.tar.gz -C "$HOME/src/"

        ln -s $HOME/src/ripgrep-*/rg "$HOME/bin/rg"
    else
        _logger "${INFO}" "Already installed."
    fi
else
    _banner "Skip to install RipGrep."
fi

##### Install sixel ###########################################################

if [[ "${BUILD}" != "minimal" ]]; then
    _banner "Install Sixel..."
    if [[ ! -d "${HOME}/src/libsixel" ]]; then
        git clone https://github.com/saitoha/libsixel.git "${HOME}/src/libsixel"
        pushd "$(pwd)"
        cd "${HOME}/src/libsixel"
        ./configure
        make
        sudo make install
        popd
    else
        _logger "${INFO}" "Already installed."
    fi
else
    _banner "Skip to install Sixel."
fi

##### Install bashmarks #######################################################

if [[ "${BUILD}" != "minimal" ]]; then
    _banner "Install Bashmarks..."
    if [[ ! -d "${HOME}/src/bashmarks" ]]; then
        git clone https://github.com/huyng/bashmarks.git "${HOME}/src/bashmarks"
        pushd "$(pwd)"
        cd "${HOME}/src/bashmarks"
        make install
        popd
    else
        _logger "${INFO}" "Already installed."
    fi
else
    _banner "Skip to install Bashmarks."
fi

##### Clone neovim ############################################################

_banner "Clone Neovim..."

if [[ ! -d "${NEOVIMPATH}" ]]; then
    _logger "${INFO}" "Clone neovim"
    git clone https://github.com/neovim/neovim.git "${NEOVIMPATH}"
else
    _logger "${INFO}" "Update neovim repository"
    pushd "$(pwd)"
    cd "${DOTPATH}"
    make update-neovim
    popd
fi

##### Build neovim ############################################################

_banner "Build Neovim..."

pushd "$(pwd)"
cd "${DOTPATH}"
for i in {1..3}; do
    make build-neovim && break || sleep 10
done
popd

##### Clone vim ###############################################################

if [[ "${BUILD}" == "all" ]]; then
    _banner "Clone Vim..."
    if [[ ! -d "${VIMPATH}" ]]; then
        _logger "${INFO}" "Clone vim"
        git clone https://github.com/vim/vim.git "${VIMPATH}"
    else
        _logger "${INFO}" "Update vim repository"
        pushd "$(pwd)"
        cd "${DOTPATH}"
        make update-vim
        popd
    fi
else
    _banner "Skip to clone vim."
fi

##### Build vim ###############################################################

if [[ "${BUILD}" == "all" ]]; then
    _banner "Build Vim..."
    pushd "$(pwd)"
    cd "${DOTPATH}"
    for i in {1..3}; do
        make build-vim && break || sleep 10
    done
    popd
else
    _banner "Skip to build vim."
fi

##### Install dotfiles ########################################################

_banner "Install dotfiles..."

pushd "$(pwd)"
cd "${DOTPATH}"

make install

if ! grep -q '.config/bashrc' ${HOME}/.bashrc; then
    echo -e "\nif [ -f ~/.config/bashrc ]; then\n  . ~/.config/bashrc\nfi" >>"${HOME}/.bashrc"
fi
if ! grep -q '.config/profile.d/local.sh' ${HOME}/.bash_profile; then
    echo -e "\nif [ -f ~/.config/profile.d/local.sh ]; then\n  . ~/.config/profile.d/local.sh\nfi" >>"${HOME}/.bash_profile"
fi

_logger "${INFO}" "Update neovim plugins."
nvim --headless "+call dein#update()" +qall
nvim --headless "+call dein#source(['deoplete.nvim', 'denite.nvim'])" +UpdateRemotePlugins +qall

popd

_banner "Finished!"
