#!/usr/bin/env bash

set -e

##### Variables ###############################################################

export PATH=$HOME/neovim/bin:$HOME/.poetry/bin:$HOME/.local/bin:$HOME/go/bin:$HOME/bin:/usr/local/bin:$PATH

# Defind Colors
RED="\033[38;2;255;84;88m"
GREEN="\033[38;2;98;209;150m"
YELLOW="\033[38;2;255;179;120m"
BLUE="\033[38;2;101;178;255m"
MAGENTA="\033[38;2;144;108;255m"
CYAN="\033[38;2;99;242;241m"
CLEAR_COLOR="\033[0m"

DEBUG="MAGENTA"
INFO="GREEN"
WARN="YELLOW"
ERROR="RED"

# Define path
DOTPATH="$HOME/.dotfiles"

##### Functions ###############################################################

if [[ -t 1 ]]; then
    COL=$(tput cols)
else
    COL=80
fi

function _banner() {
    sep=$(for ((i = 1; i < ${COL}; i++)); do echo -n =; done)
    printf "\n${BLUE}%s %s${CLEAR_COLOR}\n\n" "${1}" "${sep:${#1}}"
}

function _logger() {
    COLOR="${1}"
    printf "${!COLOR}%s${CLEAR_COLOR}\n" "${2}"
}

function _latest_release() {
    repo_name = "${1}"
    curl -s "https://api.github.com/repos/${repo_name}/releases/latest" | jq '.tag_name'
}

##### Detect OS Distribution ##################################################

_banner "Detect OS Distribution"

if [[ -f /etc/os-release ]]; then
    . /etc/os-release

    is_el=false
    is_deb=false

    case "${NAME}" in
        Red*)
            # Red Hat Enterprise Linux Server
            is_el=true
            ;;
        CentOS*)
            # CentOS Linux
            is_el=true
            ;;
        Ubuntu*)
            # Ubuntu
            is_deb=true
            ;;
        *)
            _logger "${ERROR}" "Unknown OS is detected."
            exit 1
            ;;
    esac
else
    _logger "${ERROR}" "No such file. /etc/os-release"
    exit 1
fi

_logger "${INFO}" "${PRETTY_NAME} is detected."

##### Set Proxy ###############################################################

function set_yum_proxy() {
    _banner "Check if set proxy..."

    if [[ ! "${http_proxy}" ]]; then
        _logger "${INFO}" "No proxy configured."
        return
    else
        _logger "${INFO}" "Proxy environment variable: ${http_proxy}"
    fi

    if "${is_deb}"; then
        return
    fi

    if grep -q proxy /etc/yum.conf; then
        _logger "${INFO}" "Already set proxy setting."
        return
    fi

    echo "proxy=${http_proxy}" | sudo tee -a /etc/yum.conf
    _logger "${INFO}" "Configured yum proxy setting."
}

set_yum_proxy

##### Setup repositories ######################################################

function setup_repository_el() {
    _banner "Setup repositories for RHEL/CentOS..."

    if "${is_deb}"; then
        _logger "${INFO}" "Skip due to Debian/Ubuntu."
        return
    fi

    if [[ ${VERSION_ID} == "8" ]]; then
        _logger "${INFO}" "Install DNF plugins core package."
        sudo -E dnf install -y glibc-langpack-en
        sudo -E dnf install -y dnf-plugins-core
    fi

    if [[ ${ID} == "centos" && ${VERSION_ID} == "8" ]]; then
        _logger "${INFO}" "Enable PowerTools repository."
        sudo -E dnf config-manager --enable powertools
    fi

    if [[ ! -f /etc/yum.repos.d/nodesource-el.repo ]]; then
        _logger "${INFO}" "Install Nodejs repository."
        curl -fsSL https://rpm.nodesource.com/setup_12.x | sudo -E bash -
    fi

    if [[ ! -f /etc/yum.repos.d/yarn.repo ]]; then
        _logger "${INFO}" "Install Yarn repository."
        curl -fsSL https://dl.yarnpkg.com/rpm/yarn.repo | sudo -E tee /etc/yum.repos.d/yarn.repo
    fi
}

function setup_repository_deb() {
    _banner "Setup repositories for Debian/Ubuntu..."

    if "${is_el}"; then
        _logger "${INFO}" "Skip due to RHEL/CentOS."
        return
    fi

    _logger "${INFO}" "Install apt common package."
    sudo -E apt install -y software-properties-common

    if [[ ! -f /etc/apt/sources.list.d/github_git-lfs.list ]]; then
        _logger "${INFO}" "Install Git-LFS repository."
        curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo -E bash
    fi

    if [[ ! -f /etc/apt/sources.list.d/ansible-ubuntu-ansible-bionic.list && ${VERSION_ID} == "18.04" ]]; then
        _logger "${INFO}" "Install Ansible repository."
        sudo -E add-apt-repository -y ppa:ansible/ansible
    fi

    if [[ ! -f /etc/apt/sources.list.d/longsleep-ubuntu-golang-backports-bionic.list && ${VERSION_ID} == "18.04" ]]; then
        _logger "${INFO}" "Install Golang repository."
        sudo -E add-apt-repository -y ppa:longsleep/golang-backports
    fi

    if [[ ! -f /etc/apt/sources.list.d/nodesource.list ]]; then
        _logger "${INFO}" "Install Node.js repository."
        curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
    fi

    if [[ ! -f /etc/apt/sources.list.d/yarn.list ]]; then
        _logger "${INFO}" "Install Yarn repository."
        curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
        echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
    fi
}

setup_repository_el
setup_repository_deb

##### Install packages ########################################################

function install_packages_el() {
    _banner "Install Packages for RHEL/CentOS..."

    if "${is_deb}"; then
        _logger "${INFO}" "Skip due to Debian/Ubuntu."
        return
    fi

    sudo -E yum install -y \
        https://dl.fedoraproject.org/pub/epel/epel-release-latest-${VERSION_ID:0:1}.noarch.rpm

    sudo -E yum install -y \
        autoconf \
        automake \
        bzip2 \
        bzip2-devel \
        ctags \
        expat-devel \
        gcc \
        gcc-c++ \
        gettext \
        git \
        golang \
        jq \
        libcurl-devel \
        libffi-devel \
        libtool \
        lua \
        lua-devel \
        lua-term \
        luajit \
        luajit-devel \
        make \
        ncurses-devel \
        ninja-build \
        nodejs \
        openssl-devel \
        patch \
        perl-Digest-SHA \
        pkgconfig \
        python3 \
        python3-devel \
        python3-pip \
        readline-devel \
        sqlite \
        sqlite-devel \
        tk-devel \
        unzip \
        wget \
        which \
        words \
        yarn \
        zlib-devel

    if [[ ${VERSION_ID} == "7" ]]; then
        sudo -E yum install -y \
            python \
            python-devel
    fi
}

function install_packages_deb() {
    _banner "Install Packages for Debian/Ubuntu..."

    if "${is_el}"; then
        _logger "${INFO}" "Skip due to Redhat/CentOS."
        return
    fi

    sudo -E apt update
    sudo -E apt upgrade -y
    sudo -E apt install -y \
        ansible \
        figlet \
        fzy \
        gcc \
        git \
        git-lfs \
        golang-go \
        jq \
        make \
        nodejs \
        python3-dev \
        python3-distutils \
        python3-pip \
        python3-venv \
        yarn

    # for neovim
    sudo -E apt install -y \
        autoconf \
        automake \
        cmake \
        g++ \
        gettext \
        libtool \
        libtool-bin \
        ninja-build \
        pkg-config \
        sqlite3 \
        libsqlite3-dev \
        unzip

    # for pyenv
    sudo -E apt install -y --no-install-recommends \
        make \
        build-essential \
        libssl-dev \
        zlib1g-dev \
        libbz2-dev \
        libreadline-dev \
        libsqlite3-dev \
        wget \
        curl \
        llvm \
        libncurses5-dev \
        xz-utils \
        tk-dev \
        libxml2-dev \
        libxmlsec1-dev \
        libffi-dev \
        liblzma-dev
}

install_packages_el
install_packages_deb

##### Clone Dotfiles ##########################################################

_banner "Clone Dotfiles..."

if [[ ! -d "${DOTPATH}" ]]; then
    _logger "${INFO}" "Clone dotfiles repository"
    git clone --recursive https://github.com/IMOKURI/dotfiles.git "${DOTPATH}"
else
    _logger "${INFO}" "Update dotfiles repository"
    pushd "$(pwd)"
    cd "${DOTPATH}"
    make update
    popd
fi

##### Build git ###############################################################

_banner "Install Git..."
pushd "$(pwd)"
cd "${DOTPATH}"
if "${is_el}"; then
    make git
else
    make update-gitstatus
fi
popd

##### Install python packages #################################################

PYTHON_VERSION=$(/usr/bin/python3 -c "import sys;print('.'.join(map(str, sys.version_info[:2])))")

_banner "Install Pipx..."

sudo /usr/bin/python3 -m pip install -U pip

/usr/bin/python3 -m pip install --user -U pipx

_banner "Install Pyenv..."

if [[ ! -f "${HOME}/.pyenv/bin/pyenv" ]]; then
    curl https://pyenv.run | bash
else
    pyenv update
fi

_banner "Install Python Packages..."

function _pipx_install_or_upgrade() {
    if [[ ! -d "${HOME}/.local/pipx/venvs/${1}" ]]; then
        pipx install --include-deps ${1}
    else
        pipx upgrade --include-injected ${1}
    fi
}

_pipx_install_or_upgrade ansible
_pipx_install_or_upgrade cmake
_pipx_install_or_upgrade neovim-remote
_pipx_install_or_upgrade nbdime
_pipx_install_or_upgrade python-language-server

if [[ ! -d "${HOME}/.local/pipx/venvs/python-language-server" ]]; then
    pipx inject python-language-server \
        pycodestyle \
        pylint \
        pylint-venv \
        pyls-black \
        pyls-isort \
        pyls-mypy
fi

##### Install nodejs packages #################################################

_banner "Install NodeJS Packages..."
yarn global add --prefix "${HOME}" \
    @gridsome/cli \
    bash-language-server \
    diagnostic-languageserver \
    dockerfile-language-server-nodejs \
    doctoc \
    hjson \
    vim-language-server \
    vscode-json-languageserver \
    yaml-language-server

##### Install go packages #####################################################

_banner "Install Go Packages..."
GO111MODULE=on go get -u \
    github.com/mrtazz/checkmake \
    github.com/tokuhirom/git-xlsx-textconv \
    mvdan.cc/sh/cmd/shfmt

##### Install lua-language-server #############################################

_banner "Install Lua Language Server..."
if ${is_deb}; then
    pushd "$(pwd)"
    cd "${DOTPATH}"
    make lua-ls
    popd
fi

##### Install ripgrep #########################################################

RIPGREP_VERSION="12.1.1"
RIPGREP="ripgrep-${RIPGREP_VERSION}-x86_64-unknown-linux-musl"

_banner "Install RipGrep..."
if [[ ! -d "${HOME}/src/${RIPGREP}" ]]; then
    curl -fsSL -o /tmp/rg.tar.gz \
        https://github.com/BurntSushi/ripgrep/releases/download/${RIPGREP_VERSION}/${RIPGREP}.tar.gz

    tar xf /tmp/rg.tar.gz -C "${HOME}/src/"

    ln -sfnv ${HOME}/src/${RIPGREP}/rg "${HOME}/bin/rg"
else
    _logger "${INFO}" "Already installed."
fi

##### Install bat #############################################################

BAT_VERSION="v0.17.1"
BAT="bat-${BAT_VERSION}-x86_64-unknown-linux-gnu"

_banner "Install Bat..."
if [[ ! -f "${HOME}/src/${BAT}" ]]; then
    curl -fsSL -o /tmp/bat.tar.gz \
        https://github.com/sharkdp/bat/releases/download/${BAT_VERSION}/${BAT}.tar.gz

    tar xf /tmp/bat.tar.gz -C "${HOME}/src/"

    ln -sfnv ${HOME}/src/${BAT}/bat "${HOME}/bin/bat"
else
    _logger "${INFO}" "Already installed."
fi

##### Install fzf #############################################################

FZF_VERSION="0.25.1"
FZF="fzf-${FZF_VERSION}-linux_amd64.tar.gz"

_banner "Install Fzf..."
if [[ ! -f "${HOME}/src/${FZF}" ]]; then
    curl -fsSL -o ${HOME}/src/${FZF} \
        https://github.com/junegunn/fzf/releases/download/${FZF_VERSION}/${FZF}

    tar xf ${HOME}/src/${FZF} -C "${HOME}/bin/"
else
    _logger "${INFO}" "Already installed."
fi

##### Install terraform #######################################################

TERRAFORM_VERSION=$(_latest_release hashicorp/terraform)
TERRAFORM="terraform_${TERRAFORM_VERSION}_linux_amd64.zip"

_banner "Install Terraform..."
if [[ ! -f "${HOME}/src/${TERRAFORM}" ]]; then
    curl -fsSL -o ${HOME}/src/${TERRAFORM} \
        https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/${TERRAFORM}

    unzip -o ${HOME}/src/${TERRAFORM} -d ${HOME}/bin/

else
    _logger "${INFO}" "Already installed."
fi

TERRAFORM_LS_VERSION="0.13.0"
TERRAFORM_LS="terraform-ls_${TERRAFORM_LS_VERSION}_linux_amd64.zip"

_banner "Install Terraform LS..."
if [[ ! -f "${HOME}/src/${TERRAFORM_LS}" ]]; then
    curl -fsSL -o ${HOME}/src/${TERRAFORM_LS} \
        https://releases.hashicorp.com/terraform-ls/${TERRAFORM_LS_VERSION}/${TERRAFORM_LS}

    unzip -o ${HOME}/src/${TERRAFORM_LS} -d /tmp/
    mv /tmp/terraform-ls ${HOME}/bin/

else
    _logger "${INFO}" "Already installed."
fi

##### Install bashmarks #######################################################

_banner "Install Bashmarks..."
pushd "$(pwd)"
cd "${DOTPATH}"
make bashmarks
popd

##### Build neovim ############################################################

_banner "Build Neovim..."

pushd "$(pwd)"
cd "${DOTPATH}"
for i in {1..3}; do
    make neovim && break || sleep 10
done
popd

##### Install dotfiles ########################################################

_banner "Install dotfiles..."

pushd "$(pwd)"
cd "${DOTPATH}"

make install

if ! grep -q '.config/bashrc' ${HOME}/.bashrc; then
    echo -e "\nif [ -f ~/.config/bashrc ]; then\n  . ~/.config/bashrc\nfi" >> "${HOME}/.bashrc"
fi

if "${is_el}"; then
    if ! grep -q '.config/profile.d/local.sh' ${HOME}/.bash_profile; then
        echo -e "\nif [ -f ~/.config/profile.d/local.sh ]; then\n  . ~/.config/profile.d/local.sh\nfi" >> "${HOME}/.bash_profile"
    fi
else
    if ! grep -q '.config/profile.d/local.sh' ${HOME}/.profile; then
        echo -e "\nif [ -f ~/.config/profile.d/local.sh ]; then\n  . ~/.config/profile.d/local.sh\nfi" >> "${HOME}/.profile"
    fi
fi

popd

_banner "Finished!"
