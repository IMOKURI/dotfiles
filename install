#!/usr/bin/env bash

set -e

##### Variables ###############################################################

export PATH=$HOME/neovim/bin:$HOME/.poetry/bin:$HOME/.local/bin:$HOME/go/bin:$HOME/bin:/usr/local/bin:$PATH

# For Ubuntu
export DEBIAN_FRONTEND=noninteractive

# Defind Colors
RED="\033[38;2;255;84;88m"
GREEN="\033[38;2;98;209;150m"
YELLOW="\033[38;2;255;179;120m"
BLUE="\033[38;2;101;178;255m"
MAGENTA="\033[38;2;144;108;255m"
CYAN="\033[38;2;99;242;241m"
CLEAR_COLOR="\033[0m"

DEBUG="MAGENTA"
INFO="GREEN"
WARN="YELLOW"
ERROR="RED"

# Define path
DOTPATH="$HOME/.dotfiles"

##### Functions ###############################################################

COL=120

function _banner() {
    sep=$(for ((i = 1; i < ${COL}; i++)); do echo -n =; done)
    printf "\n${BLUE}%s %s${CLEAR_COLOR}\n\n" "${1}" "${sep:${#1}}"
}

function _logger() {
    COLOR="${1}"
    printf "${!COLOR}%s${CLEAR_COLOR}\n" "${2}"
}

##### Detect OS Distribution ##################################################

_banner "Detect OS Distribution"

if [[ -f /etc/os-release ]]; then
    . /etc/os-release

    case "${NAME}" in
        Ubuntu*)
            # Ubuntu
            ;;
        *)
            _logger "${ERROR}" "Unknown OS is detected."
            exit 1
            ;;
    esac
else
    _logger "${ERROR}" "No such file. /etc/os-release"
    exit 1
fi

_logger "${INFO}" "${PRETTY_NAME} is detected."

##### Setup repositories ######################################################

function setup_repository_deb() {
    _banner "Setup repositories for Ubuntu..."

    _logger "${INFO}" "Install apt common package."
    sudo -E apt-get install -y gnupg software-properties-common

    if [[ ! -f /etc/apt/sources.list.d/github_git-lfs.list ]]; then
        _logger "${INFO}" "Install Git-LFS repository."
        curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo -E bash
    fi

    if [[ ! -f /etc/apt/sources.list.d/nodesource.list ]]; then
        _logger "${INFO}" "Install Node.js repository."
        curl -sL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
    fi

    if [[ ! -f /etc/apt/sources.list.d/yarn.list ]]; then
        _logger "${INFO}" "Install Yarn repository."
        curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
        echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
    fi

    if [[ ! -f /etc/apt/sources.list.d/hashicorp.list ]]; then
        _logger "${INFO}" "Install HashCorp repository."
        curl -sL https://apt.releases.hashicorp.com/gpg |
            gpg --dearmor |
            sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
            https://apt.releases.hashicorp.com $(lsb_release -cs) main" |
            sudo tee /etc/apt/sources.list.d/hashicorp.list
    fi
}

setup_repository_deb

##### Install packages ########################################################

function install_packages_deb() {
    _banner "Install Packages for Ubuntu..."

    _logger "${INFO}" "Update package info."
    sudo -E apt-get update

    # Prevent interruptions due to time zone selection.
    sudo -E apt-get install -y tzdata

    _logger "${INFO}" "Upgrade packages."
    sudo -E apt-get upgrade -y

    _logger "${INFO}" "Install basic packages."
    sudo -E apt-get install -y \
        ansible \
        bat \
        fd-find \
        figlet \
        fzf \
        fzy \
        gcc \
        git \
        git-lfs \
        golang-go \
        jq \
        make \
        nodejs \
        python3-dev \
        python3-distutils \
        python3-pip \
        python3-venv \
        terraform \
        yarn \
        wamerican

    # for neovim
    # https://github.com/neovim/neovim/wiki/Building-Neovim#build-prerequisites
    _logger "${INFO}" "Install neovim dependencies."
    sudo -E apt-get install -y \
        autoconf \
        automake \
        cmake \
        g++ \
        gettext \
        libtool \
        libtool-bin \
        ninja-build \
        pkg-config \
        sqlite3 \
        libsqlite3-dev \
        unzip

    # for pyenv
    # https://github.com/pyenv/pyenv/wiki#suggested-build-environment
    _logger "${INFO}" "Install pyenv dependencies."
    sudo -E apt-get install -y \
        make \
        build-essential \
        libssl-dev \
        zlib1g-dev \
        libbz2-dev \
        libreadline-dev \
        libsqlite3-dev \
        wget \
        curl \
        llvm \
        libncurses5-dev \
        xz-utils \
        tk-dev \
        libxml2-dev \
        libxmlsec1-dev \
        libffi-dev \
        liblzma-dev
}

install_packages_deb

##### Install Rust ##########################################################

_banner "Install Rust..."

if command -v rustup &> /dev/null; then
    rustup update
else
    curl https://sh.rustup.rs -sSf | sh -s -- -y
fi

##### Clone Dotfiles ##########################################################

_banner "Clone Dotfiles..."

if [[ ! -d "${DOTPATH}" ]]; then
    _logger "${INFO}" "Clone dotfiles repository"
    git clone --recursive https://github.com/IMOKURI/dotfiles.git "${DOTPATH}"
else
    _logger "${INFO}" "Update dotfiles repository"
    pushd "$(pwd)"
    cd "${DOTPATH}"
    make update
    popd
fi

##### Install python packages #################################################

_banner "Install Pipx..."

sudo /usr/bin/python3 -m pip install -U pip setuptools

/usr/bin/python3 -m pip install --user -U pipx

_banner "Install Pyenv..."

if [[ ! -f "${HOME}/.pyenv/bin/pyenv" ]]; then
    curl https://pyenv.run | bash
else
    pyenv update
fi

_banner "Install Python Packages..."

function _pipx_install_or_upgrade() {
    if [[ ! -d "${HOME}/.local/pipx/venvs/${1%[*}" ]]; then
        pipx install --include-deps ${1}
    else
        pipx upgrade --include-injected ${1%[*}
    fi
}

# _pipx_install_or_upgrade ansible
_pipx_install_or_upgrade cmake
_pipx_install_or_upgrade neovim-remote
_pipx_install_or_upgrade nbdime
_pipx_install_or_upgrade kaggle
_pipx_install_or_upgrade wandb

# if [[ -d "${HOME}/.local/pipx/venvs/ansible" ]]; then
#     pipx inject ansible \
#         "ansible-lint[community,yamllint]"
#     ln -sfnv "${HOME}/.local/pipx/venvs/ansible/bin/ansible-lint" "${HOME}/.local/bin/ansible-lint"
# fi

if [[ -d "${HOME}/.local/pipx/venvs/nbdime" ]]; then
    pipx inject nbdime \
        jupyterlab \
        ipywidgets \
        black \
        isort \
        jupyterlab_code_formatter \
        jupyterlab-git
    # bash_kernel
    # ${HOME}/.local/pipx/venvs/nbdime/bin/python -m bash_kernel.install

    # INFO: bash_kernel is expecting `$` as the prompt character.
    # https://github.com/takluyver/bash_kernel/issues/80#issuecomment-637041076
fi

##### Install nodejs packages #################################################

_banner "Install NodeJS Packages..."
yarn global add --prefix "${HOME}" \
    doctoc \
    tldr
# prettier
# @gridsome/cli

yarn global upgrade

##### Install ripgrep #########################################################
RIPGREP_VERSION=$(curl -sfL https://api.github.com/repos/BurntSushi/ripgrep/releases | jq .[0].name | sed -e s/\"//g)
RIPGREP="ripgrep-${RIPGREP_VERSION}-x86_64-unknown-linux-musl"
_banner "Install RipGrep..."
if [[ ! -d "${HOME}/src/${RIPGREP}" ]]; then
    curl -fsSL -o /tmp/rg.tar.gz \
        https://github.com/BurntSushi/ripgrep/releases/download/${RIPGREP_VERSION}/${RIPGREP}.tar.gz
    mkdir -p "${HOME}/src"
    tar xf /tmp/rg.tar.gz -C "${HOME}/src/"
    ln -sfnv ${HOME}/src/${RIPGREP}/rg "${HOME}/bin/rg"
else
    _logger "${INFO}" "Already installed."
fi

##### Install bashmarks #######################################################

_banner "Install Bashmarks..."
pushd "$(pwd)"
cd "${DOTPATH}"
make bashmarks
popd

##### Install starship ########################################################

_banner "Install Starship..."

sh -c "$(curl -fsSL https://starship.rs/install.sh)" dollar_zero --yes --bin-dir "${HOME}/bin"

##### Build neovim ############################################################

_banner "Build Neovim..."

pushd "$(pwd)"
cd "${DOTPATH}"
for i in {1..3}; do
    make neovim && break || sleep 10
done
popd

##### Install dotfiles ########################################################

_banner "Install dotfiles..."

pushd "$(pwd)"
cd "${DOTPATH}"

make install

if ! grep -q '.config/bashrc' ${HOME}/.bashrc; then
    echo -e "\nif [ -f ~/.config/bashrc ]; then\n  . ~/.config/bashrc\nfi" >> "${HOME}/.bashrc"
fi

if ! grep -q '.config/profile.d/local.sh' ${HOME}/.profile; then
    echo -e "\nif [ -f ~/.config/profile.d/local.sh ]; then\n  . ~/.config/profile.d/local.sh\nfi" >> "${HOME}/.profile"
fi

popd

_banner "Well done!"
