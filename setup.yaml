---
- hosts: localhost
  gather_facts: false
  vars:
      proxy:
          http_proxy: "{{ lookup('env', 'http_proxy') | default('') }}"
  environment: "{{ proxy }}"
  tasks:
      - name: Set Proxy to Bash Profile
        blockinfile:
            path: ~/.bash_profile.local
            create: true
            block: |
                export http_proxy={{ proxy.http_proxy }}
                export https_proxy={{ proxy.http_proxy }}
        when: proxy.http_proxy != ''
        tags: initialize

      - name: Set Proxy to Git Config
        blockinfile:
            path: ~/.gitconfig.local
            create: true
            block: |
                [user]
                  name =
                  email =
                [http]
                  proxy = {{ proxy.http_proxy }}
                [https]
                  proxy = {{ proxy.http_proxy }}
        when: proxy.http_proxy != ''
        tags: initialize

      - name: Download IUS Repository Installer
        get_url:
            url: https://raw.githubusercontent.com/iuscommunity/automation-examples/bash/enable-ius.sh
            dest: /tmp/ius.sh
        tags: initialize

      - name: Install IUS Repository
        shell: bash /tmp/ius.sh
        args:
            creates: /etc/yum.repos.d/ius.repo
        become: true
        tags: initialize

      - name: Download Git-LFS Repository Installer
        get_url:
            url: https://packagecloud.io/install/repositories/github/git-lfs/script.rpm.sh
            dest: /tmp/git-lfs.sh
        tags: initialize

      - name: Install Git-LFS Repository
        shell: bash /tmp/git-lfs.sh
        args:
            creates: /etc/yum.repos.d/github_git-lfs.repo
        become: true
        tags: initialize

      - name: Download Nodejs Repository Installer
        get_url:
            url: https://rpm.nodesource.com/setup_6.x
            dest: /tmp/nodejs.sh
        tags: initialize

      - name: Install Nodejs Repository
        shell: bash /tmp/nodejs.sh
        args:
            creates: /etc/yum.repos.d/nodesource-el.repo
        become: true
        tags: initialize

      - name: Install Ripgrep Repository
        shell: yum-config-manager --add-repo=https://copr.fedorainfracloud.org/coprs/carlwgeorge/ripgrep/repo/epel-7/carlwgeorge-ripgrep-epel-7.repo
        args:
            creates: /etc/yum.repos.d/carlwgeorge-ripgrep-epel-7.repo
        become: true
        tags: initialize

      - name: Install Docker CE Repository
        shell: yum-config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
        args:
            creates: /etc/yum.repos.d/docker-ce.repo
        become: true
        tags: initialize

      - name: Install Packages
        yum:
            name: "{{ item }}"
            state: latest
        with_items:
            - make
            - which
            - git2u
            - git-lfs
            - python36u
            - python36u-devel
            - python36u-pip
            - neovim
            - ruby
            - ruby-devel
            - rubygems
            - bzip2
            - readline-devel
            - nodejs
            - ripgrep
            - docker-ce
            - yum-utils
            - device-mapper-persistent-data
            - lvm2
        become: true
        tags: [initialize, update]

      - name: Download Go Binary
        get_url:
            url: https://dl.google.com/go/go1.10.1.linux-amd64.tar.gz
            dest: /tmp/go1.10.1.linux-amd64.tar.gz
        tags: initialize

      - name: Extract Go Binary
        unarchive:
            src: /tmp/go1.10.1.linux-amd64.tar.gz
            dest: /usr/local
            creates: /usr/local/go
        tags: initialize

      - name: Download Docker Compose Binary
        get_url:
            url: https://github.com/docker/compose/releases/download/1.20.1/docker-compose-Linux-x86_64
            dest: /usr/local/bin/docker-compose
        tags: initialize

      - name: Add Executable Permission to Docker Compose Binary
        file:
            path: /usr/local/bin/docker-compose
            state: touch
            mode: 0755
        tags: initialize

      - name: Download Docker Compose Bash Completion
        get_url:
            url: https://raw.githubusercontent.com/docker/compose/1.20.1/contrib/completion/bash/docker-compose
            dest: /etc/bash_completion.d/docker-compose
        tags: initialize

      - name: Clone Rbenv
        git:
            repo: https://github.com/rbenv/rbenv.git
            dest: ~/.rbenv
        tags: initialize

      - name: Compile Rbenv
        shell: src/configure
        args:
            chdir: ~/.rbenv
        tags: initialize

      - name: Make Rbenv
        make:
            chdir: ~/.rbenv/src
        tags: initialize

      - name: Clone Ruby-Build
        git:
            repo: https://github.com/rbenv/ruby-build.git
            dest: ~/.rbenv/plugins/ruby-build
        tags: [initialize, update]

      - name: Setup Rbenv Environment Temporarily
        blockinfile:
            path: ~/.bash_profile
            block: |
                export PATH=~/.rbenv/bin:$PATH
                eval "$(rbenv init -)"
        tags: initialize

      - name: Latest Stable Ruby Version
        shell: bash -lc "rbenv install -l | grep -v - | tail -1"
        register: ruby_version
        tags: [initialize, update]

      - name: Install Latest Ruby
        shell: bash -lc "rbenv install {{ ruby_version.stdout }}"
        args:
            creates: "~/.rbenv/versions/{{ ruby_version.stdout | trim }}"
        tags: [initialize, update]

      - name: Rehash Rbenv
        shell: bash -lc "rbenv rehash {{ ruby_version.stdout }}"
        args:
            creates: "~/.rbenv/versions/{{ ruby_version.stdout | trim }}"
        tags: [initialize, update]

      - name: Set Default Ruby
        shell: bash -lc "rbenv global {{ ruby_version.stdout }}"
        args:
            creates: "~/.rbenv/versions/{{ ruby_version.stdout | trim }}"
        tags: [initialize, update]

      - name: Install Python2 Packages
        pip:
            name: "{{ item }}"
            executable: pip2.7
            state: latest
        with_items:
            - neovim
            - jedi
            - flake8
            - icdiff
            - Pygments
            - virtualenvwrapper
            - ansible
            - ansible-lint
            - ansible-tower-cli
            - yamllint
            - yapf
            - vint
        become: true
        tags: [initialize, update]

      - name: Install Python3 Packages
        pip:
            name: "{{ item }}"
            executable: pip3.6
            state: latest
        with_items:
            - neovim
            - jedi
            - flake8
            - icdiff
            - Pygments
            - virtualenvwrapper
            - yamllint
            - yapf
            - vint
        become: true
        tags: [initialize, update]

      - name: Install Ruby Packages
        gem:
            name: "{{ item }}"
            user_install: false
            executable: ~/.rbenv/shims/gem
            state: latest
        with_items:
            - msgpack
            - neovim
            - mdl
            - rubocop
        become: true
        tags: [initialize, update]

      - name: Install Node.js Packages
        npm:
            name: "{{ item }}"
            path: "{{ lookup('env','HOME') }}"
            state: latest
        with_items:
            - coffeelint
            - doctoc
            - jsonlint
            - remark
            - tldr
        tags: [initialize, update]

      - name: Create Symbolic Links for Python3
        file:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
            state: link
        with_items:
            - {src: "{{ lookup('pipe', 'which python3.6') }}", dest: '/usr/local/bin/python3'}
            - {src: "{{ lookup('pipe', 'which pip3.6') }}", dest: '/usr/local/bin/pip3'}
        become: true
        tags: initialize

      - name: Set Alternative Commands
        alternatives:
            name: "{{ item.name }}"
            link: "{{ item.link }}"
            path: "{{ item.path }}"
            priority: "{{ item.priority }}"
        with_items:
            - {name: 'python', link: '/usr/local/bin/python', path: "{{ lookup('pipe', 'which python2') }}", priority: 20}
            - {name: 'python', link: '/usr/local/bin/python', path: "{{ lookup('pipe', 'which python3') }}", priority: 30}
            - {name: 'pip', link: '/usr/local/bin/pip', path: "{{ lookup('pipe', 'which pip2') }}", priority: 20}
            - {name: 'pip', link: '/usr/local/bin/pip', path: "{{ lookup('pipe', 'which pip3') }}", priority: 30}
            - {name: 'vi', link: '/usr/local/bin/vi', path: "{{ lookup('pipe', 'which nvim') }}", priority: 100}
        become: true
        tags: initialize

      - name: Source Virtualenvwrapper Script
        shell: source /usr/bin/virtualenvwrapper.sh
        environment:
            WORKON_HOME: ~/.virtualenvs
        tags: initialize

      - name: Create Virtualenv Default Package Dir
        file:
            path: "{{ item }}"
            state: directory
        with_items:
            - ~/.virtualenvs/deps
            - ~/.virtualenvs/deps3
        tags: initialize

      - name: Install Virtualenv Default Package for Python2
        pip:
            name: "{{ item }}"
            executable: pip2.7
            state: latest
            extra_args: --target ~/.virtualenvs/deps
        with_items:
            - neovim
            - jedi
            - flake8
            - yapf
        tags: [initialize, update]

      - name: Install Virtualenv Default Package for Python3
        pip:
            name: "{{ item }}"
            executable: pip3.6
            state: latest
            extra_args: --target ~/.virtualenvs/deps3
        with_items:
            - neovim
            - jedi
            - flake8
            - yapf
        tags: [initialize, update]

      - name: Setup Virtualenv Boot Script
        blockinfile:
            path: ~/.virtualenvs/postmkvirtualenv
            block: |
                # find directory
                SITEDIR=$(virtualenvwrapper_get_site_packages_dir)
                PYVER=$(virtualenvwrapper_get_python_version)

                # create new .pth file with our path depending of python version
                if [[ $PYVER == 3* ]];
                then
                    echo "$HOME/.virtualenvs/deps3/" > "$SITEDIR/extra.pth";
                else
                    echo "$HOME/.virtualenvs/deps/" > "$SITEDIR/extra.pth";
                fi
        tags: initialize

      - name: Clone Dotfiles Repository
        git:
            repo: https://github.com/IMOKURI/dotfiles.git
            dest: ~/.dotfiles
            track_submodules: true
        tags: [initialize, update]

      - name: Find Dotfiles Path
        find:
            paths: ~/.dotfiles
            patterns: "^(?!(\\.|README.md|LICENSE|install|setup.yaml)).*$"
            use_regex: true
        register: find
        tags: deploy

      - name: Create Symbolic Links To Dotfiles
        file:
            src: "~/.dotfiles/{{ item.path | regex_replace('^.*/([^/]+)$', '\\1') }}"
            dest: "~/.{{ item.path | regex_replace('^.*/([^/]+)$', '\\1') }}"
            state: link
            force: true
        with_items:
            - "{{ find.files }}"
        tags: deploy

      - name: Find Config Dotfiles Path
        find:
            paths: ~/.dotfiles/config
            file_type: any
        register: find_config
        tags: deploy

      - name: Create Config Directory
        file:
            path: ~/.config
            state: directory
        tags: deploy

      - name: Create Symbolic Links To Config Dotfiles
        file:
            src: "~/.dotfiles/config/{{ item.path | regex_replace('^.*/([^/]+)$', '\\1') }}"
            dest: "~/.config/{{ item.path | regex_replace('^.*/([^/]+)$', '\\1') }}"
            state: link
            force: true
        with_items:
            - "{{ find_config.files }}"
        tags: deploy

      - name: Create Git Work Directory
        file:
            path: "{{ item }}"
            state: directory
        with_items:
            - ~/github
            - ~/ghe
        tags: deploy

      - name: Download Haskell Stack Installer
        get_url:
            url: https://get.haskellstack.org
            dest: /tmp/stack.sh
        tags: optional

      - name: Install Haskell Stack
        shell: bash /tmp/stack.sh
        args:
            creates: /usr/local/bin/stack
        become: true
        tags: optional

      - name: Setup Haskell
        shell: stack setup
        tags: optional

      - name: Install Haskell Packages
        shell: "stack install {{ item.target }}"
        args:
            creates: "{{ item.creates }}"
        with_items:
            - {target: ShellCheck, creates: ~/.local/bin/shellcheck}
            # - {target: ghc-mod, creates: ~/.local/bin/ghc-mod}
            # - {target: hdevtools, creates: ~/.local/bin/hdevtools}
            # - {target: hlint, creates: ~/.local/bin/hlint}
        tags: optional
