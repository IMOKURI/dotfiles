---
- hosts: localhost
  gather_facts: no
  environment:
      http_proxy: "{{ lookup('env', 'http_proxy') | default('') }}"
      https_proxy: "{{ lookup('env', 'https_proxy') | default('') }}"
  tasks:
      - name: Download IUS Repository Installer
        get_url:
            url: https://setup.ius.io
            dest: /tmp/ius.sh
        tags: initialize

      - name: Install IUS Repository
        shell: bash /tmp/ius.sh
        args:
            creates: /etc/yum.repos.d/ius.repo
        tags: initialize

      - name: Install Packages
        yum:
            name: "{{ item }}"
        with_items:
            - git2u
            - python36u
            - python36u-pip
            - neovim
        tags: initialize

      - name: Install Python2 Packages
        pip:
            name: "{{ item }}"
            executable: pip2.7
        with_items:
            - neovim
            - jedi
            - flake8
            - icdiff
            - Pygments
            - virtualenvwrapper
        tags: initialize

      - name: Install Python3 Packages
        pip:
            name: "{{ item }}"
            executable: pip3.6
        with_items:
            - neovim
            - jedi
            - flake8
            - icdiff
            - Pygments
            - virtualenvwrapper
        tags: initialize

      - name: Create Symbolic Links for Python3
        file:
            src: "{{ item.src }}"
            dest: "{{ item.dest }}"
            state: link
        with_items:
            - { src: "{{ lookup('pipe', 'which python3.6') }}", dest: '/usr/local/bin/python3' }
            - { src: "{{ lookup('pipe', 'which pip3.6') }}", dest: '/usr/local/bin/pip3' }
        tags: initialize

      - name: Set Alternative Commands
        alternatives:
            name: "{{ item.name }}"
            link: "{{ item.link }}"
            path: "{{ item.path }}"
            priority: "{{ item.priority }}"
        with_items:
            - { name: 'python', link: '/usr/local/bin/python', path: "{{ lookup('pipe', 'which python2') }}", priority: 20 }
            - { name: 'python', link: '/usr/local/bin/python', path: "{{ lookup('pipe', 'which python3') }}", priority: 30 }
            - { name: 'pip', link: '/usr/local/bin/pip', path: "{{ lookup('pipe', 'which pip2') }}", priority: 20 }
            - { name: 'pip', link: '/usr/local/bin/pip', path: "{{ lookup('pipe', 'which pip3') }}", priority: 30 }
            - { name: 'vi', link: '/usr/local/bin/vi', path: "{{ lookup('pipe', 'which nvim') }}", priority: 100 }
        tags: initialize

      - name: Source Virtualenvwrapper Script
        shell: source /usr/bin/virtualenvwrapper.sh
        environment:
            WORKON_HOME: ~/.virtualenvs
        tags: initialize

      - name: Create Virtualenv Default Package Dir
        file:
            path: "{{ item }}"
            state: directory
        with_items:
            - ~/.virtualenvs/deps
            - ~/.virtualenvs/deps3
        tags: initialize

      - name: Install Virtualenv Default Package for Python2
        pip:
            name: "{{ item }}"
            executable: pip2.7
            extra_args: --target ~/.virtualenvs/deps
        with_items:
            - neovim
            - jedi
            - flake8
        tags: initialize

      - name: Install Virtualenv Default Package for Python3
        pip:
            name: "{{ item }}"
            executable: pip3.6
            extra_args: --target ~/.virtualenvs/deps3
        with_items:
            - neovim
            - jedi
            - flake8
        tags: initialize

      - name: Setup Virtualenv Boot Script
        blockinfile:
            path: ~/.virtualenvs/postmkvirtualenv 
            block: |
                # find directory
                SITEDIR=$(virtualenvwrapper_get_site_packages_dir)
                PYVER=$(virtualenvwrapper_get_python_version)

                # create new .pth file with our path depending of python version
                if [[ $PYVER == 3* ]];
                then
                    echo "$HOME/.virtualenvs/deps3/" > "$SITEDIR/extra.pth";
                else
                    echo "$HOME/.virtualenvs/deps/" > "$SITEDIR/extra.pth";
                fi
        tags: initialize

      - name: Clone Dotfiles Repository
        git:
            repo: https://github.com/IMOKURI/dotfiles.git
            dest: ~/.dotfiles
        tags: [initialize, update]

      - name: Find Dotfiles Path
        find:
            paths: ~/.dotfiles
            patterns: "^(?!(\\.|README.md|LICENSE|install|setup.yaml)).*$"
            use_regex: true
        register: find
        tags: deploy

      - name: Create Symbolic Links To Dotfiles
        file:
            src: "~/.dotfiles/{{ item.path | regex_replace('^.*/([^/]+)$', '\\1') }}"
            dest: "~/.{{ item.path | regex_replace('^.*/([^/]+)$', '\\1') }}"
            state: link
            force: true
        with_items:
            - "{{ find.files }}"
        tags: deploy

      - name: Find Config Dotfiles Path
        find:
            paths: ~/.dotfiles/config
            file_type: any
        register: find_config
        tags: deploy

      - name: Create Config Directory
        file:
            path: ~/.config
            state: directory
        tags: deploy

      - name: Create Symbolic Links To Config Dotfiles
        file:
            src: "~/.dotfiles/config/{{ item.path | regex_replace('^.*/([^/]+)$', '\\1') }}"
            dest: "~/.config/{{ item.path | regex_replace('^.*/([^/]+)$', '\\1') }}"
            state: link
            force: true
        with_items:
            - "{{ find_config.files }}"
        tags: deploy

      - name: Download Haskell Stack Installer
        get_url:
            url: https://get.haskellstack.org
            dest: /tmp/stack.sh
        tags: [optional, haskell]

      - name: Install Haskell Stack
        shell: bash /tmp/stack.sh
        args:
            creates: /usr/local/bin/stack
        tags: [optional, haskell]

      - name: Setup Haskell
        shell: stack setup
        tags: [optional, haskell]

      - name: Install Haskell Packages
        shell: "stack install {{ item.target }}"
        args:
            creates: "{{ item.creates }}"
        with_items:
            - { target: ShellCheck, creates: ~/.local/bin/shellcheck }
            - { target: ghc-mod, creates: ~/.local/bin/ghc-mod }
            - { target: hdevtools, creates: ~/.local/bin/hdevtools }
            - { target: hlint, creates: ~/.local/bin/hlint }
        tags: [optional, haskell]
