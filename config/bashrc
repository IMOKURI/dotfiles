# .config/bashrc

##### Environment variables ###################################################

export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_CACHE_HOME="${HOME}/.cache"
export XDG_DATA_HOME="${HOME}/.local/share"
export XDG_STATE_HOME="${HOME}/.local/state"

export INPUTRC="${XDG_CONFIG_HOME}/inputrc"

export GPG_TTY=$(tty)

export HISTCONTROL=ignoreboth:erasedups

export BAT_THEME="Catppuccin Mocha"

if echo "${PATH}" | grep -q neovim; then
    :
else
    export PATH=$HOME/neovim/bin:$HOME/.local/bin:$HOME/bin:$PATH
fi

##### Set bash options ########################################################

# ディレクトリ名を実行すると、そのディレクトリに移動する
shopt -s autocd

# dotで始まるファイルをワイルドカードのマッチ対象に含める
shopt -s dotglob

# ** を指定すると、該当ディレクトリ以下のディレクトリを再帰的にマッチにする
shopt -s globstar

# シェルスクリプト内でaliasを使えるようにする
shopt -s expand_aliases

##### User specific alias #####################################################

# Neovim/Vim

if [[ -n "${NVIM}" && -x "$(command -v nvr)" ]]; then
    alias vi="nvr -s"
elif [[ -n "${NVIM_LISTEN_ADDRESS}" && -x "$(command -v nvr)" ]]; then
    alias vi="nvr -s"
elif [[ -x "$(command -v nvim)" ]]; then
    alias vi="nvim"
fi

function minimal-env() {
    cd "$(mktemp -d)" || exit
    export HOME=$PWD
    export XDG_CONFIG_HOME=$HOME/.config
    export XDG_CACHE_HOME=$HOME/.cache
    export XDG_DATA_HOME=$HOME/.local/share
    export XDG_STATE_HOME=$HOME/.local/state
    pwd
}

cdd() {
    cd ~/.dotfiles/ || exit
}
cds() {
    cd ~/.local/state/nvim/swap || exit
}
cdr() {
    cd "$(git rev-parse --show-toplevel)" || exit
}

docker-clean() {
    docker container prune -f
    docker volume prune -f
    docker image prune -f
    # docker system prune --volumes -f
}

tmp-clean() {
    find /tmp -mtime +60 -type f -delete
    find /tmp -empty -type d -delete
}

venv() {
    if [[ ! -d .venv ]]; then
        python3 -m venv .venv
        . .venv/bin/activate
        pip install -U pip setuptools
    else
        . .venv/bin/activate
    fi
}

alias sudo='sudo '

alias ga='git add'
alias gaa='git add -A'
alias gb='git branch'
alias gc='git commit --signoff'
alias gca='git commend'
alias gcm='git commit -m'
alias gco='git checkout'
alias gcob='git checkout $(basename $(git symbolic-ref refs/remotes/origin/HEAD))'
alias gd='git diff'
alias gdc='git diff --cached'
alias gdd='git difftool'
alias gf='git fetch'
alias gg='git graph'
alias gi='git it'
alias gm='git merge'
alias gmt='git mergetool'
alias gp='git pull'
alias gpf='git please'
alias gpu='git push'
alias gs='git status'
alias gsf='git submodule foreach'
alias gsr='git submodule foreach git checkout .'
alias gsm='git submodule foreach git pull origin master'
alias gsu='git submodule update --recursive'

# Delete merged branch
alias gbd='git branch --merged | grep -vE "^\*| master$| develop$" | xargs git branch -d'

# Delere squash merged branch
function gbds() {
    git checkout -q master
    git for-each-ref refs/heads/ "--format=%(refname:short)" | while read branch; do
        mergeBase=$(git merge-base master "$branch")
        if [[ $(git cherry master "$(git commit-tree "$(git rev-parse "$branch"^{tree})" -p "$mergeBase" -m _)") == "-"* ]]; then
            git branch -D "$branch"
        fi
    done
}
alias gbds=gbds

alias k='kubectl'
alias ka='kubectl apply'
alias kc='kubectl create'
alias kd='kubectl delete'
alias ke='kubectl exec'
alias kg='kubectl get'
alias kga='kubectl get all'
alias kl='kubectl logs'
alias ks='kubectl describe'

kn() {
    if [[ ${#} -eq 0 ]]; then
        kubectl config view | grep namespace:
    else
        kubectl config set-context $(kubectl config current-context) --namespace=${1}
    fi
}

alias m='microk8s'
alias ms='microk8s status'

alias dp='docker ps -a'
alias dl='docker logs'
alias di='docker images'
alias dv='docker volume ls'
alias dn='docker network ls'

alias a='ansible'
alias ap='ansible-playbook'
alias av='ansible-vault'

alias e='explorer.exe .'

alias nd='nbdiff -s'
alias j='jupyter lab --no-browser --ip="0.0.0.0"'

alias rg='rg --smart-case'

alias bat="batcat"
alias b="bat"

##### Load bashmarks ##########################################################

if [ -f ~/.local/bin/bashmarks.sh ]; then
    . ~/.local/bin/bashmarks.sh
fi

##### Activate Starship #######################################################

eval "$(starship init bash)"
