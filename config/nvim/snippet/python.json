{
  "shebang": {
    "prefix": "shebang",
    "body": "#!/usr/bin/env python",
    "description": "Code snippet for shebang"
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ${1:expression}:",
      "\t${2:pass}"
    ],
    "description": "Code snippet for an if statement"
  },
  "if/else": {
    "prefix": "if/else",
    "body": [
      "if ${1:condition}:",
      "\t${2:pass}",
      "else:",
      "\t${3:pass}"
    ],
    "description": "Code snippet for an if statement with else"
  },
  "elif": {
    "prefix": "elif",
    "body": [
      "elif ${1:expression}:",
      "\t${2:pass}"
    ],
    "description": "Code snippet for an elif"
  },
  "else": {
    "prefix": "else",
    "body": [
      "else:",
      "\t${1:pass}"
    ],
    "description": "Code snippet for an else"
  },
  "while": {
    "prefix": "while",
    "body": [
      "while ${1:expression}:",
      "\t${2:pass}"
    ],
    "description": "Code snippet for a while loop"
  },
  "while/else": {
    "prefix": "while/else",
    "body": [
      "while ${1:expression}:",
      "\t${2:pass}",
      "else:",
      "\t${3:pass}"
    ],
    "description": "Code snippet for a while loop with else"
  },
  "for": {
    "prefix": "for",
    "body": [
      "for ${1:target_list} in ${2:expression_list}:",
      "\t${3:pass}"
    ],
    "description": "Code snippet for a for loop"
  },
  "for/else": {
    "prefix": "for/else",
    "body": [
      "for ${1:target_list} in ${2:expression_list}:",
      "\t${3:pass}",
      "else:",
      "\t${4:pass}"
    ],
    "description": "Code snippet for a for loop with else"
  },
  "try/except": {
    "prefix": "try/except",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:expression} as ${3:identifier}:",
      "\t${4:pass}"
    ],
    "description": "Code snippet for a try/except statement"
  },
  "try/finally": {
    "prefix": "try/finally",
    "body": [
      "try:",
      "\t${1:pass}",
      "finally:",
      "\t${2:pass}"
    ],
    "description": "Code snippet for a try/finally statement"
  },
  "try/except/else": {
    "prefix": "try/except/else",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:expression} as ${3:identifier}:",
      "\t${4:pass}",
      "else:",
      "\t${5:pass}"
    ],
    "description": "Code snippet for a try/except/else statement"
  },
  "try/except/finally": {
    "prefix": "try/except/finally",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:expression} as ${3:identifier}:",
      "\t${4:pass}",
      "finally:",
      "\t${5:pass}"
    ],
    "description": "Code snippet for a try/except/finally statement"
  },
  "try/except/else/finally": {
    "prefix": "try/except/else/finally",
    "body": [
      "try:",
      "\t${1:pass}",
      "except ${2:expression} as ${3:identifier}:",
      "\t${4:pass}",
      "else:",
      "\t${5:pass}",
      "finally:",
      "\t${6:pass}"
    ],
    "description": "Code snippet for a try/except/else/finally statement"
  },
  "with": {
    "prefix": "with",
    "body": [
      "with ${1:expression} as ${2:target}:",
      "\t${3:pass}"
    ],
    "description": "Code snippet for a with statement"
  },
  "def": {
    "prefix": "def",
    "body": [
      "def ${1:funcname}(${2:parameter_list}):",
      "\t${3:pass}"
    ],
    "description": "Code snippet for a function definition"
  },
  "def(instance method)": {
    "prefix": "def instance method",
    "body": [
      "def ${1:funcname}(self, ${2:parameter_list}):",
      "\t${3:pass}"
    ],
    "description": "Code snippet for a instance method"
  },
  "def(static method)": {
    "prefix": "def static method",
    "body": [
      "@staticmethod",
      "def ${1:funcname}(${2:parameter_list}):",
      "\t${3:pass}"
    ],
    "description": "Code snippet for a static method"
  },
  "def(class method)": {
    "prefix": "def class method",
    "body": [
      "@classmethod",
      "def ${1:funcname}(cls, ${2:parameter_list}):",
      "\t${3:pass}"
    ],
    "description": "Code snippet for a class method"
  },
  "def(abstract instance method)": {
    "prefix": "def abstract instance method",
    "body": [
      "def ${1:funcname}(self, ${2:parameter_list}):",
      "\traise NotImplementedError"
    ],
    "description": "Code snippet for an abstract instance method"
  },
  "class": {
    "prefix": "class",
    "body": [
      "class ${1:classname}:",
      "\tdef __init__(self${2:, parameter_list}):",
      "\t\t${3:super().__init__()}"
    ],
    "description": "Code snippet for a class definition"
  },
  "lambda": {
    "prefix": "lambda",
    "body": [
      "lambda ${1:parameter_list}: ${2:expression}"
    ],
    "description": "Code snippet for a lambda statement"
  },
  "if(main)": {
    "prefix": "__main__",
    "body": [
      "if __name__ == \"__main__\":",
      "    ${1:pass}"
    ],
    "description": "Code snippet for a `if __name__ == \"__main__\": ...` block"
  },
  "pdb": {
    "prefix": "pdb",
    "body": [
      "# TODO: Use PDB Debug Code.",
      "import pdb; pdb.set_trace()"
    ],
    "description": "Code snippet for pdb debug"
  },
  "logger": {
    "prefix": "logger",
    "body": "log = logging.getLogger(__name__)",
    "description": "Code snippet to logger"
  },
  "logger(basic config)": {
    "prefix": "logger basic config",
    "body": [
      "logging.basicConfig(",
      "\t# filename=__file__.replace('.py', '.log'),",
      "\tstream=sys.stdout,",
      "\tlevel=logging.getLevelName(\"INFO\"),",
      "\tformat=\"%(asctime)s [%(levelname)s] [%(module)s] %(message)s\",",
      ")"
    ],
    "description": "Code snippet to logger"
  },
  "pandas": {
    "prefix": "pandas",
    "body": "import pandas as pd",
    "description": "Code snippet to import pandas"
  },
  "numpy": {
    "prefix": "numpy",
    "body": "import numpy as np",
    "description": "Code snippet to import numpy"
  },
  "typing": {
    "prefix": "typing",
    "body": "from typing import ${1:Dict, List}",
    "description": "Code snippet to import typing"
  }
}
