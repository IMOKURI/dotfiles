[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'challenger-deep-theme/vim'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'airblade/vim-rooter'
hook_add = '''
    let g:rooter_change_directory_for_non_project_files = 'current'
    let g:rooter_patterns = ['.git', '.git/']
'''

[[plugins]]
repo = 'haya14busa/is.vim'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
depends = 'is.vim'
hook_add = '''
    nmap n <Plug>(is-nohl)<Plug>(anzu-n)
    nmap N <Plug>(is-nohl)<Plug>(anzu-N)
    nmap * <Plug>(anzu-star)<Plug>(is-nohl-1)

    augroup Anzu
        autocmd!
        autocmd WinLeave,TabLeave * call anzu#clear_search_status()
    augroup END
'''

[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
    let g:neoterm_autoscroll = 1
    let g:neoterm_default_mod = 'botright'
    let g:neoterm_repl_python = 'python'

    nnoremap <silent> <C-t> :Ttoggle<CR>
    tnoremap <silent> <C-t> <C-\><C-n>:Ttoggle<CR>

    nnoremap <silent> <C-y> :Topen<CR><C-w>ji
    tnoremap <silent> <C-y> <C-\><C-n><C-w>k
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
hook_add = '''
    nmap s <Nop>
    xmap s <Nop>
'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'

[[plugins]]
repo =  'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
        \ 'colorscheme': 'challenger_deep',
        \ 'active': {
        \   'left': [
        \     [ 'mode', 'paste' ],
        \     [ 'fugitive', 'readonly', 'filepath', 'modified' ],
        \     [ 'linter_checking', 'linter_warnings', 'linter_errors', 'linter_ok' ]
        \   ],
        \   'right': [
        \     [ 'percent', 'lineinfo' ],
        \     [ 'filetype' ],
        \     [ 'anzu', 'fileformat', 'fileencoding' ]
        \   ]
        \ },
        \ 'tabline': {
        \   'left': [[ 'tabs' ]],
        \   'right': [[ 'none' ]]
        \ },
        \ 'component_expand': {
        \   'linter_checking': 'lightline#ale#checking',
        \   'linter_warnings': 'lightline#ale#warnings',
        \   'linter_errors': 'lightline#ale#errors',
        \   'linter_ok': 'lightline#ale#ok',
        \ },
        \ 'component_type': {
        \   'linter_warnings': 'warning',
        \   'linter_errors': 'error',
        \ },
        \ 'component_function': {
        \   'fugitive': 'LightLineFugitive',
        \   'readonly': 'LightLineReadOnly',
        \   'filepath': 'LightLineFilePath',
        \   'anzu': 'anzu#search_status'
        \ }
        \ }

    let g:lightline.separator    = { 'left': '', 'right': '' }
    let g:lightline.subseparator = { 'left': '', 'right': '' }

    function! LightLineFugitive() abort " {{{
        try
            return exists('*fugitive#head') ? ' ' . fugitive#head() : ''
        catch
        endtry
        return ''
    endfunction " }}}

    function! LightLineReadOnly() abort " {{{
        return &filetype !~? 'help' && &readonly ? '' : ''
    endfunction " }}}

    function! LightLineFilePath() abort " {{{
        " ファイル名を下位3階層のみの表示にする
        try
            if expand('%:p:~') =~# '^suda://'
                let g:is_suda = 'suda://'
            else
                let g:is_suda = ''
            endif

            if expand('%:p:~:s?suda://??') =~# '^/[^/]*\/[^/]*\/[^/]*$'
                return expand('%:p:~')
            elseif expand('%:p:~:s?suda://??') =~# '/[^/]*\/[^/]*\/[^/]*$'
                return g:is_suda . expand('%:p:~:s?suda://??:s?.*\(/[^/]*\/[^/]*\/[^/]*\)$?...\1?')
            else
                return expand('%:p:~')
            endif
        catch
        endtry
        return ''
    endfunction "}}}
'''

[[plugins]]
repo =  'maximbaz/lightline-ale'
depends = ['lightline.vim']
hook_add = '''
    let g:lightline#ale#indicator_checking = '(」・ω・)」うー '
    let g:lightline#ale#indicator_ok = '(/・ω・)/にゃー'
'''
