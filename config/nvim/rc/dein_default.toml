[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'challenger-deep-theme/vim'
hook_add = '''
    " Palette {{{
    let s:red            = {'gui': '#ff8080', 'cterm': '204'}
    let s:dark_red       = {'gui': '#ff5458', 'cterm': '203'}

    let s:yellow         = {'gui': '#ffe9aa', 'cterm': '228'}
    let s:dark_yellow    = {'gui': '#ffb378', 'cterm': '215'}

    let s:green          = {'gui': '#95ffa4', 'cterm': '120'}
    let s:dark_green     = {'gui': '#62d196', 'cterm': '119'}

    let s:blue           = {'gui': '#91ddff', 'cterm': '159'}
    let s:dark_blue      = {'gui': '#65b2ff', 'cterm': '75'}

    let s:purple         = {'gui': '#c991e1', 'cterm': '141'}
    let s:dark_purple    = {'gui': '#906cff', 'cterm': '135'}

    let s:cyan           = {'gui': '#aaffe4', 'cterm': '122'}
    let s:dark_cyan      = {'gui': '#63f2f1', 'cterm': '121'}

    let s:clouds         = {'gui': '#cbe3e7', 'cterm': '253'}
    let s:dark_clouds    = {'gui': '#a6b3cc', 'cterm': '252'}

    let s:asphalt        = {'gui': '#1e1c31', 'cterm': '233'}
    let s:asphalt_subtle = {'gui': '#100E23', 'cterm': '232'}
    let s:dark_asphalt   = {'gui': '#565575', 'cterm': '236'}

    let s:norm        = s:clouds
    let s:norm_subtle = s:dark_clouds

    let s:bg          = s:asphalt
    let s:bg_subtle   = s:asphalt_subtle
    let s:bg_dark     = s:dark_asphalt
    " }}}

    function! CustomizeColors() abort " {{{
        if has('nvim')
            call vimrc#colorize('ActiveWindow',   {'bg': s:bg,        'fg': s:norm})
            call vimrc#colorize('InactiveWindow', {'bg': s:bg_subtle, 'fg': s:norm})
            set winhighlight=Normal:ActiveWindow,NormalNC:InactiveWindow
        endif

        call vimrc#colorize('NormalFloat', {'bg': s:bg, 'fg': s:norm})

        " ALE Highlight {{{
        call vimrc#colorize('ALEError',   {'bg': s:bg_subtle, 'fg': s:dark_red})
        call vimrc#colorize('ALEWarning', {'bg': s:bg_subtle, 'fg': s:dark_yellow})

        if has('nvim-0.3.2')
            call vimrc#colorize('ALEErrorSignLineNr',        {'bg': s:bg_subtle, 'fg': s:dark_red})
            call vimrc#colorize('ALEStyleErrorSignLineNr',   {'bg': s:bg_subtle, 'fg': s:dark_red})
            call vimrc#colorize('ALEWarningSignLineNr',      {'bg': s:bg_subtle, 'fg': s:dark_yellow})
            call vimrc#colorize('ALEStyleWarningSignLineNr', {'bg': s:bg_subtle, 'fg': s:dark_yellow})
        endif
        " }}}

        call vimrc#colorize('Folded',            {'bg': s:bg_subtle,   'fg': s:blue})

        call vimrc#colorize('CursorLineNr',      {'bg': s:bg_subtle,   'fg': s:yellow})
        call vimrc#colorize('DimLineNr',         {'bg': s:bg_subtle,   'fg': s:dark_asphalt})
        call vimrc#colorize('HighlightedLineNr', {'bg': s:bg_subtle,   'fg': s:green})

        call vimrc#colorize('YankRoundRegion',   {'bg': s:norm_subtle, 'fg': s:bg_subtle})

        " LightLine color palette {{{
        let s:palette = g:lightline#colorscheme#challenger_deep#palette

        let s:palette.tabline.tabsel = [
            \ [ s:bg_subtle.gui, s:cyan.gui,        s:bg_subtle.cterm, s:cyan.cterm ]
            \ ]

        let s:palette.tabline.right = [
            \ [ s:bg_subtle.gui, s:bg_subtle.gui,   s:bg_subtle.cterm, s:bg_subtle.cterm ]
            \ ]

        let s:palette.normal.left = [
            \ [ s:bg_subtle.gui, s:blue.gui,        s:bg_subtle.cterm, s:blue.cterm ],
            \ [ s:bg_subtle.gui, s:dark_blue.gui,   s:bg_subtle.cterm, s:dark_blue.cterm ]
            \ ]
        let s:palette.normal.right = [
            \ [ s:bg_subtle.gui, s:blue.gui,        s:bg_subtle.cterm, s:blue.cterm ],
            \ [ s:bg_subtle.gui, s:dark_blue.gui,   s:bg_subtle.cterm, s:dark_blue.cterm ]
            \ ]

        let s:palette.insert.left = [
            \ [ s:bg_subtle.gui, s:yellow.gui,      s:bg_subtle.cterm, s:yellow.cterm ],
            \ [ s:bg_subtle.gui, s:dark_yellow.gui, s:bg_subtle.cterm, s:dark_yellow.cterm ]
            \ ]
        let s:palette.insert.right = [
            \ [ s:bg_subtle.gui, s:yellow.gui,      s:bg_subtle.cterm, s:yellow.cterm ],
            \ [ s:bg_subtle.gui, s:dark_yellow.gui, s:bg_subtle.cterm, s:dark_yellow.cterm ]
            \ ]

        let s:palette.visual.left = [
            \ [ s:bg_subtle.gui, s:green.gui,       s:bg_subtle.cterm, s:green.cterm ],
            \ [ s:bg_subtle.gui, s:dark_green.gui,  s:bg_subtle.cterm, s:dark_green.cterm ]
            \ ]
        let s:palette.visual.right = [
            \ [ s:bg_subtle.gui, s:green.gui,       s:bg_subtle.cterm, s:green.cterm ],
            \ [ s:bg_subtle.gui, s:dark_green.gui,  s:bg_subtle.cterm, s:dark_green.cterm ]
            \ ]

        let s:palette.replace.left = [
            \ [ s:bg_subtle.gui, s:red.gui,         s:bg_subtle.cterm, s:red.cterm ],
            \ [ s:bg_subtle.gui, s:dark_red.gui,    s:bg_subtle.cterm, s:dark_red.cterm ]
            \ ]
        let s:palette.replace.right = [
            \ [ s:bg_subtle.gui, s:red.gui,         s:bg_subtle.cterm, s:red.cterm ],
            \ [ s:bg_subtle.gui, s:dark_red.gui,    s:bg_subtle.cterm, s:dark_red.cterm ]
            \ ]

        let s:palette.inactive.left = [
            \ [ s:bg_subtle.gui, s:purple.gui,      s:bg_subtle.cterm, s:purple.cterm ],
            \ [ s:bg_subtle.gui, s:dark_purple.gui, s:bg_subtle.cterm, s:dark_purple.cterm ]
            \ ]
        let s:palette.inactive.right = [
            \ [ s:bg_subtle.gui, s:purple.gui,      s:bg_subtle.cterm, s:purple.cterm ],
            \ [ s:bg_subtle.gui, s:dark_purple.gui, s:bg_subtle.cterm, s:dark_purple.cterm ]
            \ ]
        " }}}

    endfunction " }}}

    augroup CustomizeColors
        autocmd!
        autocmd ColorScheme * call CustomizeColors()
    augroup END
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'airblade/vim-rooter'
hook_add = '''
    let g:rooter_change_directory_for_non_project_files = 'current'
    let g:rooter_patterns = ['.git', '.git/']
'''

[[plugins]]
repo = 'haya14busa/is.vim'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
depends = 'is.vim'
hook_add = '''
    nmap n <Plug>(is-nohl)<Plug>(anzu-n)
    nmap N <Plug>(is-nohl)<Plug>(anzu-N)
    nmap * <Plug>(anzu-star)<Plug>(is-nohl-1)

    augroup Anzu
        autocmd!
        autocmd WinLeave,TabLeave * call anzu#clear_search_status()
    augroup END
'''

[[plugins]]
repo = 'kassio/neoterm'
hook_add = '''
    let g:neoterm_autoscroll = 1
    let g:neoterm_default_mod = 'botright'
    let g:neoterm_repl_python = 'python'

    nnoremap <silent> <C-t> :Ttoggle<CR>
    tnoremap <silent> <C-t> <C-\><C-n>:Ttoggle<CR>

    nnoremap <silent> <C-y> :Topen<CR><C-w>ji
    tnoremap <silent> <C-y> <C-\><C-n><C-w>k
'''

[[plugins]]
repo = 'machakann/vim-sandwich'
hook_add = '''
    nmap s <Nop>
    xmap s <Nop>
'''

[[plugins]]
repo = 'AndrewRadev/linediff.vim'

[[plugins]]
repo =  'itchyny/lightline.vim'
hook_add = '''
    " g:lightline {{{
    let g:lightline = {
        \ 'colorscheme': 'challenger_deep',
        \ 'active': {
        \   'left': [
        \     [ 'mode', 'paste' ],
        \     [ 'fugitive', 'readonly', 'filepath', 'modified' ],
        \     [ 'linter_checking', 'linter_warnings', 'linter_errors', 'linter_ok' ]
        \   ],
        \   'right': [
        \     [ 'percent', 'lineinfo' ],
        \     [ 'filetype' ],
        \     [ 'anzu', 'fileformat', 'fileencoding' ]
        \   ]
        \ },
        \ 'tabline': {
        \   'left': [[ 'tabs' ]],
        \   'right': [[ 'none' ]]
        \ },
        \ 'component_expand': {
        \   'linter_checking': 'lightline#ale#checking',
        \   'linter_warnings': 'lightline#ale#warnings',
        \   'linter_errors': 'lightline#ale#errors',
        \   'linter_ok': 'lightline#ale#ok',
        \ },
        \ 'component_type': {
        \   'linter_warnings': 'warning',
        \   'linter_errors': 'error',
        \ },
        \ 'component_function': {
        \   'fugitive': 'LightLineFugitive',
        \   'readonly': 'LightLineReadOnly',
        \   'filepath': 'LightLineFilePath',
        \   'anzu': 'anzu#search_status'
        \ }
        \ }
    " }}}

    let g:lightline.separator    = { 'left': '', 'right': '' }
    let g:lightline.subseparator = { 'left': '', 'right': '' }

    function! LightLineFugitive() abort " {{{
        try
            return exists('*fugitive#head') ? ' ' . fugitive#head() : ''
        catch
        endtry
        return ''
    endfunction " }}}

    function! LightLineReadOnly() abort " {{{
        return &filetype !~? 'help' && &readonly ? '' : ''
    endfunction " }}}

    function! LightLineFilePath() abort " {{{
        " ファイル名を下位3階層のみの表示にする
        try
            if expand('%:p:~') =~# '^suda://'
                let g:is_suda = 'suda://'
            else
                let g:is_suda = ''
            endif

            if expand('%:p:~:s?suda://??') =~# '^/[^/]*\/[^/]*\/[^/]*$'
                return expand('%:p:~')
            elseif expand('%:p:~:s?suda://??') =~# '/[^/]*\/[^/]*\/[^/]*$'
                return g:is_suda . expand('%:p:~:s?suda://??:s?.*\(/[^/]*\/[^/]*\/[^/]*\)$?...\1?')
            else
                return expand('%:p:~')
            endif
        catch
        endtry
        return ''
    endfunction "}}}
'''

[[plugins]]
repo =  'maximbaz/lightline-ale'
depends = ['lightline.vim']
hook_add = '''
    let g:lightline#ale#indicator_checking = '(」・ω・)」うー '
    let g:lightline#ale#indicator_ok = '(/・ω・)/にゃー'
'''

# vim:set foldmethod=marker:
